/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EntangledLedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adjust"
      | "createPair"
      | "getPair"
      | "joinPair"
      | "nextId"
      | "owner"
      | "pairs"
      | "relayer"
      | "relayerAdjust"
      | "setRelayer"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Adjusted"
      | "PairCreated"
      | "PairJoined"
      | "RelayerChanged"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adjust",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayerAdjust",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "adjust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerAdjust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AdjustedEvent {
  export type InputTuple = [
    id: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    from: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairCreatedEvent {
  export type InputTuple = [id: BigNumberish, a: AddressLike];
  export type OutputTuple = [id: bigint, a: string];
  export interface OutputObject {
    id: bigint;
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairJoinedEvent {
  export type InputTuple = [id: BigNumberish, b: AddressLike];
  export type OutputTuple = [id: bigint, b: string];
  export interface OutputObject {
    id: bigint;
    b: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerChangedEvent {
  export type InputTuple = [who: AddressLike];
  export type OutputTuple = [who: string];
  export interface OutputObject {
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    id: BigNumberish,
    who: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, who: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EntangledLedger extends BaseContract {
  connect(runner?: ContractRunner | null): EntangledLedger;
  waitForDeployment(): Promise<this>;

  interface: EntangledLedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adjust: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, fromAToB: boolean],
    [void],
    "nonpayable"
  >;

  createPair: TypedContractMethod<[], [bigint], "payable">;

  getPair: TypedContractMethod<
    [id: BigNumberish],
    [[string, string, bigint, bigint, boolean]],
    "view"
  >;

  joinPair: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  nextId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pairs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        a: string;
        b: string;
        balA: bigint;
        balB: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  relayer: TypedContractMethod<[], [string], "view">;

  relayerAdjust: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, fromAToB: boolean],
    [void],
    "nonpayable"
  >;

  setRelayer: TypedContractMethod<[who: AddressLike], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adjust"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, fromAToB: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPair"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[string, string, bigint, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinPair"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        a: string;
        b: string;
        balA: bigint;
        balB: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "relayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayerAdjust"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, fromAToB: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRelayer"
  ): TypedContractMethod<[who: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Adjusted"
  ): TypedContractEvent<
    AdjustedEvent.InputTuple,
    AdjustedEvent.OutputTuple,
    AdjustedEvent.OutputObject
  >;
  getEvent(
    key: "PairCreated"
  ): TypedContractEvent<
    PairCreatedEvent.InputTuple,
    PairCreatedEvent.OutputTuple,
    PairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PairJoined"
  ): TypedContractEvent<
    PairJoinedEvent.InputTuple,
    PairJoinedEvent.OutputTuple,
    PairJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerChanged"
  ): TypedContractEvent<
    RelayerChangedEvent.InputTuple,
    RelayerChangedEvent.OutputTuple,
    RelayerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Adjusted(uint256,address,address,uint256)": TypedContractEvent<
      AdjustedEvent.InputTuple,
      AdjustedEvent.OutputTuple,
      AdjustedEvent.OutputObject
    >;
    Adjusted: TypedContractEvent<
      AdjustedEvent.InputTuple,
      AdjustedEvent.OutputTuple,
      AdjustedEvent.OutputObject
    >;

    "PairCreated(uint256,address)": TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;
    PairCreated: TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;

    "PairJoined(uint256,address)": TypedContractEvent<
      PairJoinedEvent.InputTuple,
      PairJoinedEvent.OutputTuple,
      PairJoinedEvent.OutputObject
    >;
    PairJoined: TypedContractEvent<
      PairJoinedEvent.InputTuple,
      PairJoinedEvent.OutputTuple,
      PairJoinedEvent.OutputObject
    >;

    "RelayerChanged(address)": TypedContractEvent<
      RelayerChangedEvent.InputTuple,
      RelayerChangedEvent.OutputTuple,
      RelayerChangedEvent.OutputObject
    >;
    RelayerChanged: TypedContractEvent<
      RelayerChangedEvent.InputTuple,
      RelayerChangedEvent.OutputTuple,
      RelayerChangedEvent.OutputObject
    >;

    "Withdrawn(uint256,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
